//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Channels;

namespace Fizum.Tests.ServiceReference1
{
    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name = "NotifyCustomer", Namespace = "http://schemas.datacontract.org/2004/07/Starbucks.Messages")]
    [Serializable]
    public class NotifyCustomer : object, IExtensibleDataObject, INotifyPropertyChanged
    {
        [OptionalField] private Guid OrderIdField;
        [NonSerialized] private ExtensionDataObject extensionDataField;

        [DataMember]
        public Guid OrderId
        {
            get { return OrderIdField; }
            set
            {
                if ((OrderIdField.Equals(value) != true))
                {
                    OrderIdField = value;
                    RaisePropertyChanged("OrderId");
                }
            }
        }

        #region IExtensibleDataObject Members

        [Browsable(false)]
        public ExtensionDataObject ExtensionData
        {
            get { return extensionDataField; }
            set { extensionDataField = value; }
        }

        #endregion

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name = "OrderDrink", Namespace = "http://schemas.datacontract.org/2004/07/Starbucks.Messages")]
    [Serializable]
    public class OrderDrink : object, IExtensibleDataObject, INotifyPropertyChanged
    {
        [OptionalField] private Drinks DrinkField;

        [OptionalField] private Guid OrderIdField;
        [NonSerialized] private ExtensionDataObject extensionDataField;

        [DataMember]
        public Drinks Drink
        {
            get { return DrinkField; }
            set
            {
                if ((DrinkField.Equals(value) != true))
                {
                    DrinkField = value;
                    RaisePropertyChanged("Drink");
                }
            }
        }

        [DataMember]
        public Guid OrderId
        {
            get { return OrderIdField; }
            set
            {
                if ((OrderIdField.Equals(value) != true))
                {
                    OrderIdField = value;
                    RaisePropertyChanged("OrderId");
                }
            }
        }

        #region IExtensibleDataObject Members

        [Browsable(false)]
        public ExtensionDataObject ExtensionData
        {
            get { return extensionDataField; }
            set { extensionDataField = value; }
        }

        #endregion

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name = "Drinks", Namespace = "http://schemas.datacontract.org/2004/07/Starbucks")]
    public enum Drinks
    {
        [EnumMember] Frappacino = 0,

        [EnumMember] Cappucino = 1,

        [EnumMember] Espresso = 2,
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name = "Pay", Namespace = "http://schemas.datacontract.org/2004/07/Starbucks.Messages")]
    [Serializable]
    public class Pay : object, IExtensibleDataObject, INotifyPropertyChanged
    {
        [OptionalField] private decimal AmountField;

        [OptionalField] private Guid OrderIdField;
        [NonSerialized] private ExtensionDataObject extensionDataField;

        [DataMember]
        public decimal Amount
        {
            get { return AmountField; }
            set
            {
                if ((AmountField.Equals(value) != true))
                {
                    AmountField = value;
                    RaisePropertyChanged("Amount");
                }
            }
        }

        [DataMember]
        public Guid OrderId
        {
            get { return OrderIdField; }
            set
            {
                if ((OrderIdField.Equals(value) != true))
                {
                    OrderIdField = value;
                    RaisePropertyChanged("OrderId");
                }
            }
        }

        #region IExtensibleDataObject Members

        [Browsable(false)]
        public ExtensionDataObject ExtensionData
        {
            get { return extensionDataField; }
            set { extensionDataField = value; }
        }

        #endregion

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name = "PrepareDrink", Namespace = "http://schemas.datacontract.org/2004/07/Starbucks.Messages")]
    [Serializable]
    public class PrepareDrink : object, IExtensibleDataObject, INotifyPropertyChanged
    {
        [OptionalField] private Drinks DrinkField;

        [OptionalField] private Guid OrderIdField;
        [NonSerialized] private ExtensionDataObject extensionDataField;

        [DataMember]
        public Drinks Drink
        {
            get { return DrinkField; }
            set
            {
                if ((DrinkField.Equals(value) != true))
                {
                    DrinkField = value;
                    RaisePropertyChanged("Drink");
                }
            }
        }

        [DataMember]
        public Guid OrderId
        {
            get { return OrderIdField; }
            set
            {
                if ((OrderIdField.Equals(value) != true))
                {
                    OrderIdField = value;
                    RaisePropertyChanged("OrderId");
                }
            }
        }

        #region IExtensibleDataObject Members

        [Browsable(false)]
        public ExtensionDataObject ExtensionData
        {
            get { return extensionDataField; }
            set { extensionDataField = value; }
        }

        #endregion

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    [ServiceContract(Namespace = "http://tempuri.org/contract/Sales", ConfigurationName = "ServiceReference1.Sales")]
    public interface Sales
    {
        [OperationContract(Action = "http://tempuri.org/contract/Sales/NotifyCustomer",
            ReplyAction = "http://tempuri.org/contract/Sales/NotifyCustomer")]
        void NotifyCustomer([MessageParameter(Name = "NotifyCustomer")] NotifyCustomer NotifyCustomer1);

        [OperationContract(Action = "http://tempuri.org/contract/Sales/OrderDrink",
            ReplyAction = "http://tempuri.org/contract/Sales/OrderDrink")]
        void OrderDrink([MessageParameter(Name = "OrderDrink")] OrderDrink OrderDrink1);

        [OperationContract(Action = "http://tempuri.org/contract/Sales/Pay",
            ReplyAction = "http://tempuri.org/contract/Sales/Pay")]
        void Pay([MessageParameter(Name = "Pay")] Pay Pay1);

        [OperationContract(Action = "http://tempuri.org/contract/Sales/PrepareDrink",
            ReplyAction = "http://tempuri.org/contract/Sales/PrepareDrink")]
        void PrepareDrink([MessageParameter(Name = "PrepareDrink")] PrepareDrink PrepareDrink1);
    }

    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    public interface SalesChannel : Sales, IClientChannel
    {
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    public class SalesClient : ClientBase<Sales>, Sales
    {
        public SalesClient()
        {
        }

        public SalesClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        public SalesClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public SalesClient(string endpointConfigurationName, EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public SalesClient(Binding binding, EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        #region Sales Members

        public void NotifyCustomer(NotifyCustomer NotifyCustomer1)
        {
            base.Channel.NotifyCustomer(NotifyCustomer1);
        }

        public void OrderDrink(OrderDrink OrderDrink1)
        {
            base.Channel.OrderDrink(OrderDrink1);
        }

        public void Pay(Pay Pay1)
        {
            base.Channel.Pay(Pay1);
        }

        public void PrepareDrink(PrepareDrink PrepareDrink1)
        {
            base.Channel.PrepareDrink(PrepareDrink1);
        }

        #endregion
    }

    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    [ServiceContract(ConfigurationName = "ServiceReference1.IBoundedContext")]
    public interface IBoundedContext
    {
        [OperationContract(Action = "http://tempuri.org/IBoundedContext/GetName",
            ReplyAction = "http://tempuri.org/IBoundedContext/GetNameResponse")]
        string GetName();
    }

    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    public interface IBoundedContextChannel : IBoundedContext, IClientChannel
    {
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    public class BoundedContextClient : ClientBase<IBoundedContext>, IBoundedContext
    {
        public BoundedContextClient()
        {
        }

        public BoundedContextClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        public BoundedContextClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public BoundedContextClient(string endpointConfigurationName, EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public BoundedContextClient(Binding binding, EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        #region IBoundedContext Members

        public string GetName()
        {
            return base.Channel.GetName();
        }

        #endregion
    }
}